#![cfg_attr(not(feature = "std"), no_std)]

use codec::{Encode, Decode};
//use frame_support::Parameter;
//use sp_runtime::traits::Member;
//use frame_support::pallet_prelude::*;
//use frame_support::traits::Get;
use sp_std::vec::Vec;
use sp_runtime::traits::Hash;

#[derive(Encode, Decode)]
pub struct TokenInfoTwo<AccountId, Hash>{
	pub owner: AccountId,
	pub nft_id: Hash,
	pub ipfs_url: Vec<u8>,
}
#[derive(Encode, Decode)]
pub struct TokenInfo<AccountId, Hash>{
	pub owner: AccountId,
	pub nft_id: Hash,
}
#[derive(Encode, Decode)]
pub struct AcctInfo<AccountId>{
	pub owner: AccountId,
}
#[derive(Encode, Decode)]
pub struct HshInfo<Hash>{
	pub nft_id: Hash,
}
#[derive(Encode, Decode)]
pub struct TokenInfoFinal{
	pub ipfs_id: Vec<u8>,
}
#[derive(Encode, Decode)]
pub struct NFT<AccountId, Hash>{
	pub id: Hash,
	pub creator: AccountId,
	pub royalty: u8,
	pub share: u8,
	pub data: Vec<u8>,
	// sale_history | buyer, block_number, sale_value
}


pub use pallet::*;

#[frame_support::pallet]
pub mod pallet {
	use frame_support::{dispatch::DispatchResult, pallet_prelude::*};
	use frame_system::pallet_prelude::*;
	use super::*;

	#[pallet::config]
	pub trait Config: frame_system::Config {
		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
		//type TokenData: Parameter + Member + MaybeSerializeDeserialize;
	}

	pub type TokenInfoOf<T> = TokenInfo<<T as frame_system::Config>::AccountId, <T as frame_system::Config>::Hash>;
	pub type TokenInfoTwoOf<T> = TokenInfoTwo<<T as frame_system::Config>::AccountId, <T as frame_system::Config>::Hash>;
	pub type AcctInfoOf<T> = AcctInfo<<T as frame_system::Config>::AccountId>;
	pub type HshInfoOf<T> = HshInfo<<T as frame_system::Config>::Hash>;
	pub type TokenInfoFinalOf = TokenInfoFinal;
	pub type NFT_<T> = NFT<<T as frame_system::Config>::AccountId, <T as frame_system::Config>::Hash>;
	//pub type NFTOf<T> = NFT<<T as frame_system::Config>::AccountId, <T as frame_system::Config>::Hash>;
	
	#[pallet::pallet]
	#[pallet::generate_store(pub(super) trait Store)]
	pub struct Pallet<T>(_);

	#[pallet::storage]
	#[pallet::getter(fn some_map)]
	pub(super) type SomeMap<T> = StorageMap<_, Blake2_128Concat, <T as frame_system::Config>::AccountId, TokenInfoOf<T>>;

	#[pallet::storage]
	#[pallet::getter(fn some_map_two)]
	pub(super) type SomeMapTwo<T> = StorageMap<_, Blake2_128Concat, <T as frame_system::Config>::AccountId, TokenInfoTwoOf<T>>;

	#[pallet::storage]
	#[pallet::getter(fn acct_map)]
	pub(super) type AcctMap<T> = StorageMap<_, Blake2_128Concat, <T as frame_system::Config>::AccountId, AcctInfoOf<T>>;

	#[pallet::storage]
	#[pallet::getter(fn hsh_map)]
	pub(super) type HshMap<T> = StorageMap<_, Blake2_128Concat, <T as frame_system::Config>::AccountId, HshInfoOf<T>>;

	#[pallet::storage]
	#[pallet::getter(fn main_map)]
	pub(super) type MainMap<T> = StorageMap<_, Blake2_128Concat, (<T as frame_system::Config>::AccountId, <T as frame_system::Config>::Hash), TokenInfoFinalOf>;

	#[pallet::storage]
	#[pallet::getter(fn get_NFT)]
	pub(super) type NFTMap<T> = StorageMap<_, Blake2_128Concat, <T as frame_system::Config>::AccountId, NFT_<T>>;

	// #[pallet::storage]
	// #[pallet::getter(fn get_NFT)]
	// pub(super) type NFTMap<T> = StorageMap<_, Blake2_128Concat, <T as frame_system::Config>::AccountId, NFTOf<T>>;

	#[pallet::event]
	#[pallet::metadata(T::AccountId = "AccountId")]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {
		SomethingStored(u32, T::AccountId),
	}

	#[pallet::error]
	pub enum Error<T> {
		NoneValue,
		StorageOverflow,
	}

	#[pallet::hooks]
	impl<T: Config> Hooks<BlockNumberFor<T>> for Pallet<T> {}

	#[pallet::call]
	impl<T:Config> Pallet<T> {
		#[pallet::weight(10_000 + T::DbWeight::get().writes(1))]
		pub fn mint(origin: OriginFor<T>, data: Vec<u8>, royalty: u8, share: u8) -> DispatchResult {
			let caller = ensure_signed(origin)?;
			
			let nft_hash = T::Hashing::hash_of(&data);

			let url = "www.ipfs.com";
			let ipfs_url = url.as_bytes().to_vec();

			// let x = b"aaa";
			// let v = vec![0,1,2];
			// let y = vec![b"a"];
			// let z = vec![b"aa"];

			let q = (&caller, nft_hash);

			let token_info_two = TokenInfoTwo {
				owner: caller.clone(),
				nft_id: nft_hash,
				ipfs_url: ipfs_url.clone(),
			};
			let token_info = TokenInfo {
				owner: caller.clone(),
				nft_id: nft_hash,
			};
			let acct_info = AcctInfo {
				owner: caller.clone(),
			};
			let hsh_info = HshInfo {
				nft_id: nft_hash,
			};
			let token_info_final = TokenInfoFinal {
				ipfs_id: ipfs_url,
			};
			let nft = NFT {
				id: nft_hash,
				creator: caller.clone(),
				royalty,
				share,
				data,
			};

			SomeMap::<T>::insert(&caller, token_info);
			SomeMapTwo::<T>::insert(&caller, token_info_two);
			AcctMap::<T>::insert(&caller, acct_info);
			HshMap::<T>::insert(&caller, hsh_info);
			// MainMap::<T>::insert(q, token_info_final);
			MainMap::<T>::insert(q, token_info_final);
			NFTMap::<T>::insert(&caller, nft);

			Ok(())

			//nft
			//<Addr<T>>::put(&caller);

			//Self::deposit_event(Event::SomethingStored(something, caller));

			// File imported through mint function call
			// Hash of file created.

			// Store file on IPFS
			// Get IPFS storage location
			// Store IPFS location data in ipfs_url

			// create object: owner | hash of data | IPFS location

			// encrypt IPFS location (using a password) and store the encrypted IPFS location
			// encrypt the IPFS data prior to loading on IPFS
		}

		// #[pallet::weight(10_000 + T::DbWeight::get().writes(1))]
		// pub fn mint(origin: OriginFor<T>, data: T::TokenData, bytes: Vec<u8>) -> DispatchResult {
		// 	let caller = ensure_signed(origin)?;
			
		// 	// create nft data
		// 	// hash the data
		// 	// store data on IPFS
		// 	// get IPFS storage location
		// 	// create object: owner | hash of data | IPFS location
		// 	// encrypt IPFS location (using a password) and store the encrypted IPFS location
		// 	// encrypt the IPFS data prior to loading on IPFS
			

		// 	let token_info = TokenInfo {
		// 		owner: caller.clone(),
		// 		data,
		// 		bytes,
		// 	};

		// 	SomeMap::<T>::insert(&caller, token_info);

		// 	//nft
		// 	//<Addr<T>>::put(&caller);

		// 	//Self::deposit_event(Event::SomethingStored(something, caller));

		// 	Ok(())
		// }

		// #[pallet::weight(10_000 + T::DbWeight::get().writes(1))]
		// pub fn do_addr(origin: OriginFor<T>, something: u32) -> DispatchResult {
		// 	let who = ensure_signed(origin)?;

		// 	<Addr<T>>::put(&who);

		// 	Self::deposit_event(Event::SomethingStored(something, who));

		// 	Ok(())
		// }
		
		// #[pallet::weight(10_000 + T::DbWeight::get().writes(1))]
		// pub fn do_something(origin: OriginFor<T>, something: u32) -> DispatchResult {
		// 	let who = ensure_signed(origin)?;

		// 	<Something<T>>::put(something);

		// 	Self::deposit_event(Event::SomethingStored(something, who));

		// 	Ok(())
		// }

		// #[pallet::weight(10_000 + T::DbWeight::get().reads_writes(1,1))]
		// pub fn cause_error(origin: OriginFor<T>) -> DispatchResult {
		// 	let _who = ensure_signed(origin)?;

		// 	match <Something<T>>::get() {

		// 		None => Err(Error::<T>::NoneValue)?,
		// 		Some(old) => {
		// 			let new = old.checked_add(1).ok_or(Error::<T>::StorageOverflow)?;
		// 			<Something<T>>::put(new);
		// 			Ok(())
		// 		},
		// 	}
		// }

		// #############
		// pub type TokenInfoOf<T> = TokenInfo<<T as frame_system::Config>::AccountId, <T as Config>::LovelyNumber>;
		// pub type TokenInfoOf<T> = TokenInfo<<T as frame_system::Config>::AccountId, <T as Config>::TokenData>;

		// #############
		// #[pallet::storage]
		// #[pallet::getter(fn something)]
		// pub type Something<T> = StorageValue<_, u32>;

		// #[pallet::storage]
		// #[pallet::getter(fn get_addr)]	
		// pub type Addr<T> = StorageValue<_, <T as frame_system::Config>::AccountId>;

		// #[pallet::storage]
		// #[pallet::getter(fn some_map)]
		// pub(super) type SomeMap<T> = StorageMap<_, Blake2_128Concat, <T as frame_system::Config>::AccountId, TokenInfoOf<T>>;
		// pub(super) type SomeMap<T> = StorageMap<_, Blake2_128Concat, <T as frame_system::Config>::AccountId, u32>;
		// pub(super) type SomeMap<T> = StorageMap<_, Blake2_128Concat, T::AccountId, u32, ValueQuery>;

		// #[pallet::storage]
		// pub(super) type SomeDoubleMap<T> = StorageDoubleMap<_, Blake2_128Concat, u32, Blake2_128Concat, <T as frame_system::Config>::AccountId, u32>;
		// pub(super) type SomeDoubleMap<T> = StorageDoubleMap<_, Blake2_128Concat, u32, Blake2_128Concat, T::AccountId, u32, ValueQuery>;

		// #############
		// type LovelyNumber: Get<u32>;
	}
}

